{"version":3,"sources":["components/LoadMoreButton.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoadMoreButton","onAction","this","props","className","onClick","icon","faChevronDown","size","React","PureComponent","App","state","fetching","packets","pageNumber","srcDoc","window","location","protocol","host","pathname","path","slice","length","QUERY","BASE","URL","console","log","getBaseURL","fetchData","fetch","then","_","json","res","sample","setState","catch","e","style","margin","map","packet","key","uid","distance","title","target","href","url","refURL","loadMore","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8QA0BeA,G,uLAhBD,IACEC,EAAaC,KAAKC,MAAlBF,SAER,OACI,yBAAKG,UAAU,kBAAkBC,QAASJ,GACtC,yBAAKG,UAAU,mBAAf,4BAGA,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAiBE,KAAMC,IAAeC,KAAK,a,GAVlCC,IAAMC,gBCyGpBC,E,2MA1FXC,MAAe,CACXC,UAAU,EACVC,QAAS,GACTC,WAAY,EACZC,OAAQ,I,iFAGe,IAAD,EACKC,OAAOC,SAClC,OAFsB,EACdC,SACU,KAFI,EACJC,O,mCAI8B,IAAjCL,EAAgC,uDAAX,EAAW,EACVE,OAAOC,SAApCG,EADuC,EACvCA,SAAUF,EAD6B,EAC7BA,SAAUC,EADmB,EACnBA,KACxBE,EAAOD,EAASE,MAAM,GACP,GAAfD,EAAKE,SACLF,EAAOpB,KAAKU,MAAMI,QAEtB,IAAMS,EAAQ,eAAiBV,EACzBW,EAAOP,EAAW,KAAOC,EAAO,QAAUE,EAE1CK,EAAMD,EAAOD,EAEnB,OADAG,QAAQC,IAAIF,GACLA,I,0CAIP,IAAMA,EAAMzB,KAAK4B,aACjB5B,KAAK6B,UAAUJ,K,gCAGTA,GAAoB,IAAD,OACzBK,MAAML,GACDM,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GACFR,QAAQC,IAAIO,GADH,IAEDC,EAAmBD,EAAnBC,OAAQrB,EAAWoB,EAAXpB,OAChB,EAAKsB,SAAS,CAAEzB,UAAU,EAAOC,QAASuB,EAAQrB,cAErDuB,OAAM,SAAAC,GACHZ,QAAQC,IAAIW,GACZ,EAAKF,SAAS,CAAEzB,UAAU,S,iCAKlC,IAAMc,EAAMzB,KAAK4B,WAAW5B,KAAKU,MAAMG,WAAa,GACpDb,KAAKoC,UAAS,kBAAqB,CAAEvB,WAAvB,EAAGA,WAA6C,MAE9Db,KAAK6B,UAAUJ,K,+BAGT,IAAD,SACyBzB,KAAKU,MAA3BC,EADH,EACGA,SAAUC,EADb,EACaA,QAElB,OAAiB,IAAbD,EACO,KAIP,yBAAK4B,MAAO,CAAEC,OAAQ,UAClB,+BACI,4BACI,wCACA,qCACA,yCACA,8CAGA5B,EAAQ6B,KAAI,SAAAC,GAAM,OACd,wBAAIC,IAAKD,EAAOE,KACZ,4BAAKF,EAAOG,UACZ,4BAAKH,EAAOI,OACZ,4BACI,uBAAGC,OAAO,UAAUC,KAAMN,EAAOO,KAAjC,eAEJ,4BACI,uBAAGF,OAAO,UAAUC,KAAMN,EAAOQ,QAAjC,iBAOpB,kBAAC,EAAD,CAAgBnD,SAAU,kBAAM,EAAKoD,mB,GArFnC5C,IAAM6C,WCXJC,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.10f2de12.chunk.js","sourcesContent":["import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport './LoadMoreButton.css';\n\ninterface Props {\n    onAction: () => void,\n}\n\nclass LoadMoreButton extends React.PureComponent<Props> {\n    render() {\n        const { onAction } = this.props;\n\n        return (\n            <div className=\"buttonContainer\" onClick={onAction}>\n                <div className=\"textAlignCenter\">\n                    ...Click to Load More...\n                </div>\n                <div className='textAlignCenter'>\n                    <FontAwesomeIcon icon={faChevronDown} size=\"lg\" />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default LoadMoreButton;\n","import React from 'react';\nimport Popup from 'reactjs-popup';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport LoadMoreButton from './components/LoadMoreButton';\n\ninterface Packet {\n    distance: string,\n    uid: string,\n    url: string,\n    title: string,\n    refURL: string,\n}\n\ninterface Props { }\n\ninterface State {\n    fetching: boolean,\n    packets: Array<Packet>,\n    pageNumber: number,\n    srcDoc: string,\n}\n\nclass App extends React.Component<Props, State> {\n    state: State = {\n        fetching: true,\n        packets: [],\n        pageNumber: 1,\n        srcDoc: '',\n    };\n\n    getReferenceURL(): string {\n        const { protocol, host } = window.location;\n        return protocol + '//' + host;\n    }\n\n    private getBaseURL(pageNumber: number = 1): string {\n        const { pathname, protocol, host } = window.location;\n        let path = pathname.slice(1);\n        if (path.length == 0) {\n            path = this.state.srcDoc;\n        }\n        const QUERY = '?pageNumber=' + pageNumber;\n        const BASE = protocol + '//' + host + '/gen/' + path;\n        // const BASE = 'http://tuna.cs.uwaterloo.ca:1234/gen/' + path;\n        const URL = BASE + QUERY;\n        console.log(URL);\n        return URL;\n    }\n\n    componentDidMount() {\n        const URL = this.getBaseURL();\n        this.fetchData(URL);\n    }\n\n    fetchData(URL: string): void {\n        fetch(URL)\n            .then(_ => _.json())\n            .then(res => {\n                console.log(res);\n                const { sample, srcDoc } = res;\n                this.setState({ fetching: false, packets: sample, srcDoc });\n            })\n            .catch(e => {\n                console.log(e);\n                this.setState({ fetching: false });\n            });\n    }\n\n    loadMore() {\n        const URL = this.getBaseURL(this.state.pageNumber + 1);\n        this.setState(({ pageNumber }) => ({ pageNumber: pageNumber + 1 }));\n\n        this.fetchData(URL);\n    }\n\n    render() {\n        const { fetching, packets } = this.state;\n\n        if (fetching === true) {\n            return null;\n        }\n\n        return (\n            <div style={{ margin: '100px' }}>\n                <table >\n                    <tr>\n                        <th>Distance</th>\n                        <th>Title</th>\n                        <th>Paper URL</th>\n                        <th>Use as Source</th>\n                    </tr>\n                    {\n                        packets.map(packet => (\n                            <tr key={packet.uid}>\n                                <th>{packet.distance}</th>\n                                <th>{packet.title}</th>\n                                <th>\n                                    <a target=\"__blank\" href={packet.url}>View Paper</a>\n                                </th>\n                                <th>\n                                    <a target=\"__blank\" href={packet.refURL}>More...</a>\n                                </th>\n\n                            </tr>\n                        ))\n                    }\n                </table>\n                <LoadMoreButton onAction={() => this.loadMore()} />\n            </div >\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}